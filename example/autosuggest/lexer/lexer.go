// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/goccmack/gocc/example/autosuggest/token"
)

const (
	NoState    = -1
	NumStates  = 59
	NumSymbols = 60
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '0'
1: '-'
2: '-'
3: '"'
4: '"'
5: 'f'
6: 'i'
7: 'n'
8: 'd'
9: 'w'
10: 'i'
11: 't'
12: 'h'
13: 'a'
14: 't'
15: 'a'
16: 'u'
17: 't'
18: 'h'
19: 'o'
20: 'r'
21: 't'
22: 'i'
23: 't'
24: 'l'
25: 'e'
26: 't'
27: 'e'
28: 'x'
29: 't'
30: 's'
31: 'e'
32: 'a'
33: 'r'
34: 'c'
35: 'h'
36: 't'
37: 'i'
38: 'm'
39: 'e'
40: 'r'
41: 'a'
42: 'n'
43: 'g'
44: 'e'
45: '-'
46: '-'
47: ':'
48: '/'
49: '/'
50: '\n'
51: ' '
52: '\t'
53: '\n'
54: '\r'
55: '0'-'9'
56: '1'-'9'
57: 'A'-'Z'
58: 'a'-'z'
59: .
*/
