// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
	charMap map[Type]string
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}
func (m TokenMap) Characters(typ Type) string {
	return fmt.Sprintf("%s", m.charMap[typ])
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"find",
		"with",
		"id",
		"at",
		"author",
		"title",
		"textsearch",
		"timerange",
		"--",
		":",
		"int_lit",
		"dayMonth",
		"number",
		"space",
	},

	idMap: map[string]Type{
		"INVALID":    0,
		"$":          1,
		"find":       2,
		"with":       3,
		"id":         4,
		"at":         5,
		"author":     6,
		"title":      7,
		"textsearch": 8,
		"timerange":  9,
		"--":         10,
		":":          11,
		"int_lit":    12,
		"dayMonth":   13,
		"number":     14,
		"space":      15,
	},
	charMap: map[Type]string{
		0:  ``,
		1:  ``,
		2:  `'f''i''n''d'`,
		3:  `'w''i''t''h'`,
		4:  `'"'('A'-'Z'|'a'-'z'){'A'-'Z'|'a'-'z'|'0'-'9'|' '|'\t'|'\n'|'\r'}'"'`,
		5:  `'a''t'`,
		6:  `'a''u''t''h''o''r'`,
		7:  `'t''i''t''l''e'`,
		8:  `'t''e''x''t''s''e''a''r''c''h'`,
		9:  `'t''i''m''e''r''a''n''g''e'`,
		10: `'-''-'`,
		11: `':'`,
		12: `'0'|['-']('1'-'9'){'0'-'9'}`,
		13: `'-''0'-'9''0'-'9'`,
		14: `'0'-'9'{'0'-'9'}`,
		15: `'/''/'{}'\n'|' '|'\t'|'\n'|'\r'{' '|'\t'|'\n'|'\r'}`,
	},
}
